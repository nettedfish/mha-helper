#!/usr/bin/env python

# (c) 2015, Ovais Tariq <me@ovaistariq.net>
#
# This file is part of mha_helper
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import time
import subprocess
import ConfigParser
import os.path
from optparse import OptionParser

sys.path.append("/usr/local/mha-helper/scripts/")
from lib.unix_daemon import Unix_daemon


class MHA_manager_daemon(Unix_daemon):
    MASTERHA_CHECK_STATUS = "/usr/bin/masterha_check_status"
    MASTERHA_MANAGER = "/usr/bin/masterha_manager"
    MASTERHA_STOP = "/usr/bin/masterha_stop"

    # masterha_manager states
    STATE_PING_OK = 0
    STATE_UNKONWN = 1
    STATE_NOT_RUNNING = 2
    STATE_PARTIALLY_RUNNING = 3
    STATE_INITIALIZING_MONITOR = 10
    STATE_CONFIG_ERROR = 31
    STATE_FAILOVER_RUNNING = 50
    STATE_FAILOVER_ERROR = 51

    def __init__(self, conf_path):
        self._conf_path = conf_path

        if os.path.exists(self._conf_path) == False:
            raise ValueError("Configuration file could not be found")

        self._config = ConfigParser.RawConfigParser()
        self._config.read(conf_path)

        self._pidfile = self.get_manager_pidfile()
        if self._pidfile == False:
            raise ValueError("Problems generating pid path")

        self._workdir = self.get_manager_workdir()
        if self._workdir == False:
            raise ValueError("Error determining manager_workdir from config")

        self._log = self.get_manager_log()
        if self._log == False:
            raise ValueError("Error determining manager_log from config")

        super(MHA_manager_daemon, self).__init__(pidfile=self._pidfile,
                                                 stdout=self._log,
                                                 stderr=self._log,
                                                 home_dir=self._workdir)

    def run(self):
        while True:
            manager_state = self.check_manager_state()
            sleep_seconds = 1

            if manager_state == MHA_manager_daemon.STATE_NOT_RUNNING:
                self.start_manager()

            if manager_state == MHA_manager_daemon.STATE_PARTIALLY_RUNNING:
                self.restart_manager()

            if manager_state == MHA_manager_daemon.STATE_INITIALIZING_MONITOR:
                sleep_seconds = 5

            time.sleep(sleep_seconds)

    def stop(self):
        super(MHA_manager_daemon, self).stop()
        self.stop_manager()

    def status(self):
        cmd = [MHA_manager_daemon.MASTERHA_CHECK_STATUS,
               "--conf=%s" % self._conf_path]
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        (stdout_data, stderr_data) = proc.communicate()

        print stdout_data
        return True

    def check_manager_state(self):
        cmd = [MHA_manager_daemon.MASTERHA_CHECK_STATUS,
               "--conf=%s" % self._conf_path]
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        (stdout, stderr) = proc.communicate()

        return proc.returncode

    def start_manager(self):
        cmd = [MHA_manager_daemon.MASTERHA_MANAGER,
               "--conf=%s" % self._conf_path,
               "--wait_on_monitor_error=60",
               "--ignore_fail_on_start",
               "--last_failover_minute=60",
               "--wait_on_failover_error=60"]

        print "[INFO] Starting masterha_manager: %s" % " ".join(cmd)

        subprocess.Popen(cmd)
        return True

    def stop_manager(self):
        while True:
            manager_state = self.check_manager_state()

            # We try to stop the manager only when its not doing a failover
            # Otherwise we wait for the failover to finish
            if manager_state != MHA_manager_daemon.STATE_FAILOVER_RUNNING:
                cmd = [MHA_manager_daemon.MASTERHA_STOP,
                       "--conf=%s" % self._conf_path]

                print "[INFO] Stopping masterha_manager: %s" % " ".join(cmd)
                proc = subprocess.Popen(cmd)

                # Give manager 30 seconds to terminate
                check_seconds=1
                while check_seconds <= 30:
                    return_code = proc.poll()
                    # masterha_stop finished
                    if return_code is not None:
                        print "[INFO] masterha_manager stopped"
                        return return_code

                    check_seconds += 1
                    time.sleep(1)

                # Manager could not be stopped in 30 seconds so we abort
                cmd = [MHA_manager_daemon.MASTERHA_STOP,
                       "--conf=%s" % self._conf_path, "--abort"]

                print "[ERROR] masterha_manager could not be stopped"
                print "[ERROR] Sending abort command: %s" % " ".join(cmd)

                return subprocess.call(cmd)

            # We came here meaning that manager is doing a failover
            print "[INFO] Waiting for masterha_manager to complete failover"
            time.sleep(1)

    def restart_manager(self):
        self.stop_manager()
        self.start_manager()

    def get_manager_pidfile(self):
        paths = os.path.splitext(self._conf_path)
        if len(paths) < 2:
            return False

        cluster_name = os.path.basename(paths[0])
        return "/var/run/mha_manager_daemon_" + cluster_name + ".pid"

    def get_manager_workdir(self):
        return self.get_param_value(param_name='manager_workdir')

    def get_manager_log(self):
        return self.get_param_value(param_name='manager_log')

    def get_param_value(self, param_name):
        if self._config.has_section('server default') == False:
            return False

        param_value = False

        if self._config.has_option('server default', param_name):
            param_value = self._config.get('server default', param_name)

        return param_value


def main():
    usage = "usage: %prog --conf=CONF start|stop|restart|status"
    parser = OptionParser(usage)
    parser.add_option('--conf', type='string')
    (options, args) = parser.parse_args()

    if len(args) == 1 and options.conf is not None:
        try:
            manager_daemon = MHA_manager_daemon(conf_path=options.conf)
        except ValueError as e:
            parser.error(str(e))
            sys.exit(3)

        if args[0] == "start":
            print "Starting daemon"
            manager_daemon.start()
        elif args[0] == "stop":
            print "Stopping daemon"
            manager_daemon.stop()
        elif args[0] == "restart":
            print "Restarting daemon"
            manager_daemon.restart()
        elif args[0] == "status":
            manager_daemon.status()
        else:
            parser.error("Unknown command")
            sys.exit(2)

        sys.exit(0)
    else:
        parser.error("Incorrect number of arguments")
        sys.exit(2)

if __name__ == "__main__":
    main()
